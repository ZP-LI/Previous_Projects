from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans, AgglomerativeClustering

N_SAMPLES = 1000
N_CLUSTERS = 4
CLUSTER_STD = .9
RANDOM_STATE = 0


def kmeans(dataset):
    # Input:
    #   - dataset: array, dim(1000, 2)
    # Return:
    #   - labels: array of ints, dim(1000, )
    # Function:
    #   - Perform clustering using KMeans() and return the generated labels

    ### Enter your code here ###
    kmeans = KMeans(n_clusters=N_CLUSTERS, random_state=RANDOM_STATE).fit(dataset)
    labels = kmeans.labels_

    ### End of your code ###

    return labels


def hierarchical_clustering(dataset):
    # Input:
    #   - dataset: array, dim(1000, 2)
    # Return:
    #   - labels: array of ints, dim(1000, )
    # Function:
    #   - Perform clustering using AgglomerativeClustering() and return the generated labels

    ### Enter your code here ###
    clustering = AgglomerativeClustering(n_clusters=N_CLUSTERS).fit(dataset)
    labels = clustering.labels_

    ### End of your code ###

    return labels


if __name__ == "__main__":
    # Function:
    #   - Create a dataset using the global variables defined at the top of the code
    #   - save the points of the dataset in X and the corresponding labels in y_pred
    #   - Create a list labels
    #   - The list consists of 3 tuples containing an array with labels and the name of the algorithm
    #     that created the labels:
    #       - 'Ground Truth': original labels of the dataset
    #       - 'KMeans': labels generated by function kmeans()
    #       - 'Hierarchical Clustering': labels generated by function hierarchical_clustering()
    #   - The different clusters are plotted (already done). Look for points with different labels
    #   - Change the parameters for the generation of the dataset and have a look how the algorithms perform

    ### Enter your code here ###
    X, y_pred = make_blobs(n_samples=N_SAMPLES, centers=N_CLUSTERS, cluster_std=CLUSTER_STD)
    labels_list = [(y_pred, 'Ground Truth'), (kmeans(X), 'KMeans'), (hierarchical_clustering(X), 'Hierarchical Clustering')]

    ### End of your code ###

    for labels_k in labels_list:
        for idx in range(max(labels_k[0]) + 1):
            plt.plot(X[labels_k[0] == idx][:, 0], X[labels_k[0] == idx][:, 1], '.', ms=2,
                     label='Cluster {:.0f}'.format(idx + 1))
            plt.title(labels_k[1])
        pass
        plt.show()
